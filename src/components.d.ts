/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Game, GamePhoto, GameSide, GameStaff, GameVideo, PlayerGame, Post } from "ftb-models";
import { FtbGameCardField } from "@src/components/ftb-game-card/ftb-game-card-fields";
import { Player } from "ftb-models/dist/models/player.model";
import { CategoryInterface } from "./components/ftb-searchable-content/ftb-searchable-content.component";
import { FtbTeamLogoMode } from "./components/ftb-team-logo/ftb-team-logo-mode";
import { Team } from "ftb-models/dist/models/team.model";
import { User } from "ftb-models/dist/models/user.model";
export namespace Components {
    interface CmpShowcase {
    }
    interface FtbAlertsFeed {
    }
    interface FtbApp {
        "firebaseConfig": {
    apiKey: string;
    authDomain: string;
    databaseURL: string;
    projectId: string;
    storageBucket: string;
    messagingSenderId: string;
    appId: string;
    vapidKey: string;
  };
    }
    interface FtbGameCard {
        "bottomFields": FtbGameCardField[];
        "game": Game;
        "leftFields": FtbGameCardField[];
        "playerStats": PlayerGame['stats'];
        "rightFields": FtbGameCardField[];
        "topFields": FtbGameCardField[];
    }
    interface FtbGameDate {
        "game": Game;
        "withtime": boolean;
    }
    interface FtbGameEvents {
        "game": Game;
    }
    interface FtbGameLineups {
        "game": Game;
    }
    interface FtbGameMedia {
        "game": Game;
    }
    interface FtbGamePerson {
        "person": GameStaff;
    }
    interface FtbGamePhotoPreview {
        "photo": GamePhoto;
    }
    interface FtbGameScoreboard {
        "game": Game;
    }
    interface FtbGameSideScore {
        "game": Game;
        "side": GameSide;
    }
    interface FtbGameStadium {
        "game": Game;
    }
    interface FtbGameState {
        "game": Game;
    }
    interface FtbGameStatsPreview {
        "game": Game;
    }
    interface FtbGameTour {
        "game": Game;
    }
    interface FtbIcon {
        "svg": string;
    }
    interface FtbImg {
        "name": string;
        "src": string;
    }
    interface FtbImprovingImg {
        "sources": string[];
    }
    interface FtbLanguageSelect {
    }
    interface FtbMedia {
        "news": Post[];
        "photoGames": Game[];
        "videos": GameVideo[];
    }
    interface FtbPagination {
        "itemHeightPx": number;
        "itemMinWidthPx": number;
        "items": any[];
        "renderItem": (item) => string;
        "rows": number;
        "stretchItems": boolean;
        "totalItems": number;
    }
    interface FtbPhotoGallery {
        "game": Game;
        "start": number;
    }
    interface FtbPlayerPhoto {
        "player": Player;
        "playerId": number;
        "version": number;
    }
    interface FtbSearchableContent {
        "categories": CategoryInterface[];
        "debounce": number;
        "filterFn": (items: any[], query: string, categories?: CategoryInterface[]) => Promise<any[]>;
        "items": any[];
        "placeholder": string;
        "renderItems": (items: any[]) => string;
    }
    interface FtbSpinner {
    }
    interface FtbTabs {
        "hideSingleTab": boolean;
        "tabs": Array<{ renderTitle: () => string; renderContent: () => string }>;
    }
    interface FtbTeamLogo {
        "logo": string;
        "mode": FtbTeamLogoMode;
        "name": string;
        "team": Team;
        "version": number;
    }
    interface FtbUserPhoto {
        "user": User;
        "userId": number;
        "version": number;
    }
    interface FtbVideo {
        "video": GameVideo;
    }
}
declare global {
    interface HTMLCmpShowcaseElement extends Components.CmpShowcase, HTMLStencilElement {
    }
    var HTMLCmpShowcaseElement: {
        prototype: HTMLCmpShowcaseElement;
        new (): HTMLCmpShowcaseElement;
    };
    interface HTMLFtbAlertsFeedElement extends Components.FtbAlertsFeed, HTMLStencilElement {
    }
    var HTMLFtbAlertsFeedElement: {
        prototype: HTMLFtbAlertsFeedElement;
        new (): HTMLFtbAlertsFeedElement;
    };
    interface HTMLFtbAppElement extends Components.FtbApp, HTMLStencilElement {
    }
    var HTMLFtbAppElement: {
        prototype: HTMLFtbAppElement;
        new (): HTMLFtbAppElement;
    };
    interface HTMLFtbGameCardElement extends Components.FtbGameCard, HTMLStencilElement {
    }
    var HTMLFtbGameCardElement: {
        prototype: HTMLFtbGameCardElement;
        new (): HTMLFtbGameCardElement;
    };
    interface HTMLFtbGameDateElement extends Components.FtbGameDate, HTMLStencilElement {
    }
    var HTMLFtbGameDateElement: {
        prototype: HTMLFtbGameDateElement;
        new (): HTMLFtbGameDateElement;
    };
    interface HTMLFtbGameEventsElement extends Components.FtbGameEvents, HTMLStencilElement {
    }
    var HTMLFtbGameEventsElement: {
        prototype: HTMLFtbGameEventsElement;
        new (): HTMLFtbGameEventsElement;
    };
    interface HTMLFtbGameLineupsElement extends Components.FtbGameLineups, HTMLStencilElement {
    }
    var HTMLFtbGameLineupsElement: {
        prototype: HTMLFtbGameLineupsElement;
        new (): HTMLFtbGameLineupsElement;
    };
    interface HTMLFtbGameMediaElement extends Components.FtbGameMedia, HTMLStencilElement {
    }
    var HTMLFtbGameMediaElement: {
        prototype: HTMLFtbGameMediaElement;
        new (): HTMLFtbGameMediaElement;
    };
    interface HTMLFtbGamePersonElement extends Components.FtbGamePerson, HTMLStencilElement {
    }
    var HTMLFtbGamePersonElement: {
        prototype: HTMLFtbGamePersonElement;
        new (): HTMLFtbGamePersonElement;
    };
    interface HTMLFtbGamePhotoPreviewElement extends Components.FtbGamePhotoPreview, HTMLStencilElement {
    }
    var HTMLFtbGamePhotoPreviewElement: {
        prototype: HTMLFtbGamePhotoPreviewElement;
        new (): HTMLFtbGamePhotoPreviewElement;
    };
    interface HTMLFtbGameScoreboardElement extends Components.FtbGameScoreboard, HTMLStencilElement {
    }
    var HTMLFtbGameScoreboardElement: {
        prototype: HTMLFtbGameScoreboardElement;
        new (): HTMLFtbGameScoreboardElement;
    };
    interface HTMLFtbGameSideScoreElement extends Components.FtbGameSideScore, HTMLStencilElement {
    }
    var HTMLFtbGameSideScoreElement: {
        prototype: HTMLFtbGameSideScoreElement;
        new (): HTMLFtbGameSideScoreElement;
    };
    interface HTMLFtbGameStadiumElement extends Components.FtbGameStadium, HTMLStencilElement {
    }
    var HTMLFtbGameStadiumElement: {
        prototype: HTMLFtbGameStadiumElement;
        new (): HTMLFtbGameStadiumElement;
    };
    interface HTMLFtbGameStateElement extends Components.FtbGameState, HTMLStencilElement {
    }
    var HTMLFtbGameStateElement: {
        prototype: HTMLFtbGameStateElement;
        new (): HTMLFtbGameStateElement;
    };
    interface HTMLFtbGameStatsPreviewElement extends Components.FtbGameStatsPreview, HTMLStencilElement {
    }
    var HTMLFtbGameStatsPreviewElement: {
        prototype: HTMLFtbGameStatsPreviewElement;
        new (): HTMLFtbGameStatsPreviewElement;
    };
    interface HTMLFtbGameTourElement extends Components.FtbGameTour, HTMLStencilElement {
    }
    var HTMLFtbGameTourElement: {
        prototype: HTMLFtbGameTourElement;
        new (): HTMLFtbGameTourElement;
    };
    interface HTMLFtbIconElement extends Components.FtbIcon, HTMLStencilElement {
    }
    var HTMLFtbIconElement: {
        prototype: HTMLFtbIconElement;
        new (): HTMLFtbIconElement;
    };
    interface HTMLFtbImgElement extends Components.FtbImg, HTMLStencilElement {
    }
    var HTMLFtbImgElement: {
        prototype: HTMLFtbImgElement;
        new (): HTMLFtbImgElement;
    };
    interface HTMLFtbImprovingImgElement extends Components.FtbImprovingImg, HTMLStencilElement {
    }
    var HTMLFtbImprovingImgElement: {
        prototype: HTMLFtbImprovingImgElement;
        new (): HTMLFtbImprovingImgElement;
    };
    interface HTMLFtbLanguageSelectElement extends Components.FtbLanguageSelect, HTMLStencilElement {
    }
    var HTMLFtbLanguageSelectElement: {
        prototype: HTMLFtbLanguageSelectElement;
        new (): HTMLFtbLanguageSelectElement;
    };
    interface HTMLFtbMediaElement extends Components.FtbMedia, HTMLStencilElement {
    }
    var HTMLFtbMediaElement: {
        prototype: HTMLFtbMediaElement;
        new (): HTMLFtbMediaElement;
    };
    interface HTMLFtbPaginationElement extends Components.FtbPagination, HTMLStencilElement {
    }
    var HTMLFtbPaginationElement: {
        prototype: HTMLFtbPaginationElement;
        new (): HTMLFtbPaginationElement;
    };
    interface HTMLFtbPhotoGalleryElement extends Components.FtbPhotoGallery, HTMLStencilElement {
    }
    var HTMLFtbPhotoGalleryElement: {
        prototype: HTMLFtbPhotoGalleryElement;
        new (): HTMLFtbPhotoGalleryElement;
    };
    interface HTMLFtbPlayerPhotoElement extends Components.FtbPlayerPhoto, HTMLStencilElement {
    }
    var HTMLFtbPlayerPhotoElement: {
        prototype: HTMLFtbPlayerPhotoElement;
        new (): HTMLFtbPlayerPhotoElement;
    };
    interface HTMLFtbSearchableContentElement extends Components.FtbSearchableContent, HTMLStencilElement {
    }
    var HTMLFtbSearchableContentElement: {
        prototype: HTMLFtbSearchableContentElement;
        new (): HTMLFtbSearchableContentElement;
    };
    interface HTMLFtbSpinnerElement extends Components.FtbSpinner, HTMLStencilElement {
    }
    var HTMLFtbSpinnerElement: {
        prototype: HTMLFtbSpinnerElement;
        new (): HTMLFtbSpinnerElement;
    };
    interface HTMLFtbTabsElement extends Components.FtbTabs, HTMLStencilElement {
    }
    var HTMLFtbTabsElement: {
        prototype: HTMLFtbTabsElement;
        new (): HTMLFtbTabsElement;
    };
    interface HTMLFtbTeamLogoElement extends Components.FtbTeamLogo, HTMLStencilElement {
    }
    var HTMLFtbTeamLogoElement: {
        prototype: HTMLFtbTeamLogoElement;
        new (): HTMLFtbTeamLogoElement;
    };
    interface HTMLFtbUserPhotoElement extends Components.FtbUserPhoto, HTMLStencilElement {
    }
    var HTMLFtbUserPhotoElement: {
        prototype: HTMLFtbUserPhotoElement;
        new (): HTMLFtbUserPhotoElement;
    };
    interface HTMLFtbVideoElement extends Components.FtbVideo, HTMLStencilElement {
    }
    var HTMLFtbVideoElement: {
        prototype: HTMLFtbVideoElement;
        new (): HTMLFtbVideoElement;
    };
    interface HTMLElementTagNameMap {
        "cmp-showcase": HTMLCmpShowcaseElement;
        "ftb-alerts-feed": HTMLFtbAlertsFeedElement;
        "ftb-app": HTMLFtbAppElement;
        "ftb-game-card": HTMLFtbGameCardElement;
        "ftb-game-date": HTMLFtbGameDateElement;
        "ftb-game-events": HTMLFtbGameEventsElement;
        "ftb-game-lineups": HTMLFtbGameLineupsElement;
        "ftb-game-media": HTMLFtbGameMediaElement;
        "ftb-game-person": HTMLFtbGamePersonElement;
        "ftb-game-photo-preview": HTMLFtbGamePhotoPreviewElement;
        "ftb-game-scoreboard": HTMLFtbGameScoreboardElement;
        "ftb-game-side-score": HTMLFtbGameSideScoreElement;
        "ftb-game-stadium": HTMLFtbGameStadiumElement;
        "ftb-game-state": HTMLFtbGameStateElement;
        "ftb-game-stats-preview": HTMLFtbGameStatsPreviewElement;
        "ftb-game-tour": HTMLFtbGameTourElement;
        "ftb-icon": HTMLFtbIconElement;
        "ftb-img": HTMLFtbImgElement;
        "ftb-improving-img": HTMLFtbImprovingImgElement;
        "ftb-language-select": HTMLFtbLanguageSelectElement;
        "ftb-media": HTMLFtbMediaElement;
        "ftb-pagination": HTMLFtbPaginationElement;
        "ftb-photo-gallery": HTMLFtbPhotoGalleryElement;
        "ftb-player-photo": HTMLFtbPlayerPhotoElement;
        "ftb-searchable-content": HTMLFtbSearchableContentElement;
        "ftb-spinner": HTMLFtbSpinnerElement;
        "ftb-tabs": HTMLFtbTabsElement;
        "ftb-team-logo": HTMLFtbTeamLogoElement;
        "ftb-user-photo": HTMLFtbUserPhotoElement;
        "ftb-video": HTMLFtbVideoElement;
    }
}
declare namespace LocalJSX {
    interface CmpShowcase {
    }
    interface FtbAlertsFeed {
    }
    interface FtbApp {
        "firebaseConfig"?: {
    apiKey: string;
    authDomain: string;
    databaseURL: string;
    projectId: string;
    storageBucket: string;
    messagingSenderId: string;
    appId: string;
    vapidKey: string;
  };
    }
    interface FtbGameCard {
        "bottomFields"?: FtbGameCardField[];
        "game": Game;
        "leftFields"?: FtbGameCardField[];
        "playerStats"?: PlayerGame['stats'];
        "rightFields"?: FtbGameCardField[];
        "topFields"?: FtbGameCardField[];
    }
    interface FtbGameDate {
        "game": Game;
        "withtime"?: boolean;
    }
    interface FtbGameEvents {
        "game": Game;
    }
    interface FtbGameLineups {
        "game": Game;
    }
    interface FtbGameMedia {
        "game": Game;
    }
    interface FtbGamePerson {
        "person"?: GameStaff;
    }
    interface FtbGamePhotoPreview {
        "photo"?: GamePhoto;
    }
    interface FtbGameScoreboard {
        "game": Game;
    }
    interface FtbGameSideScore {
        "game"?: Game;
        "side": GameSide;
    }
    interface FtbGameStadium {
        "game": Game;
    }
    interface FtbGameState {
        "game": Game;
    }
    interface FtbGameStatsPreview {
        "game": Game;
    }
    interface FtbGameTour {
        "game"?: Game;
    }
    interface FtbIcon {
        "svg": string;
    }
    interface FtbImg {
        "name"?: string;
        "onColor"?: (event: CustomEvent<[number, number, number]>) => void;
        "onFailed"?: (event: CustomEvent<boolean>) => void;
        "onLoaded"?: (event: CustomEvent<boolean>) => void;
        "src": string;
    }
    interface FtbImprovingImg {
        "sources": string[];
    }
    interface FtbLanguageSelect {
    }
    interface FtbMedia {
        "news"?: Post[];
        "photoGames"?: Game[];
        "videos"?: GameVideo[];
    }
    interface FtbPagination {
        "itemHeightPx": number;
        "itemMinWidthPx": number;
        "items"?: any[];
        "renderItem": (item) => string;
        "rows": number;
        "stretchItems"?: boolean;
        "totalItems"?: number;
    }
    interface FtbPhotoGallery {
        "game": Game;
        "onClosed"?: (event: CustomEvent<boolean>) => void;
        "onPhotographerClicked"?: (event: CustomEvent<number>) => void;
        "start": number;
    }
    interface FtbPlayerPhoto {
        "player"?: Player;
        "playerId"?: number;
        "version"?: number;
    }
    interface FtbSearchableContent {
        "categories"?: CategoryInterface[];
        "debounce"?: number;
        "filterFn": (items: any[], query: string, categories?: CategoryInterface[]) => Promise<any[]>;
        "items": any[];
        "onInputKeyDown"?: (event: CustomEvent<KeyboardEvent>) => void;
        "placeholder": string;
        "renderItems": (items: any[]) => string;
    }
    interface FtbSpinner {
    }
    interface FtbTabs {
        "hideSingleTab"?: boolean;
        "tabs": Array<{ renderTitle: () => string; renderContent: () => string }>;
    }
    interface FtbTeamLogo {
        "logo"?: string;
        "mode"?: FtbTeamLogoMode;
        "name"?: string;
        "team"?: Team;
        "version"?: number;
    }
    interface FtbUserPhoto {
        "user"?: User;
        "userId"?: number;
        "version"?: number;
    }
    interface FtbVideo {
        "video": GameVideo;
    }
    interface IntrinsicElements {
        "cmp-showcase": CmpShowcase;
        "ftb-alerts-feed": FtbAlertsFeed;
        "ftb-app": FtbApp;
        "ftb-game-card": FtbGameCard;
        "ftb-game-date": FtbGameDate;
        "ftb-game-events": FtbGameEvents;
        "ftb-game-lineups": FtbGameLineups;
        "ftb-game-media": FtbGameMedia;
        "ftb-game-person": FtbGamePerson;
        "ftb-game-photo-preview": FtbGamePhotoPreview;
        "ftb-game-scoreboard": FtbGameScoreboard;
        "ftb-game-side-score": FtbGameSideScore;
        "ftb-game-stadium": FtbGameStadium;
        "ftb-game-state": FtbGameState;
        "ftb-game-stats-preview": FtbGameStatsPreview;
        "ftb-game-tour": FtbGameTour;
        "ftb-icon": FtbIcon;
        "ftb-img": FtbImg;
        "ftb-improving-img": FtbImprovingImg;
        "ftb-language-select": FtbLanguageSelect;
        "ftb-media": FtbMedia;
        "ftb-pagination": FtbPagination;
        "ftb-photo-gallery": FtbPhotoGallery;
        "ftb-player-photo": FtbPlayerPhoto;
        "ftb-searchable-content": FtbSearchableContent;
        "ftb-spinner": FtbSpinner;
        "ftb-tabs": FtbTabs;
        "ftb-team-logo": FtbTeamLogo;
        "ftb-user-photo": FtbUserPhoto;
        "ftb-video": FtbVideo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cmp-showcase": LocalJSX.CmpShowcase & JSXBase.HTMLAttributes<HTMLCmpShowcaseElement>;
            "ftb-alerts-feed": LocalJSX.FtbAlertsFeed & JSXBase.HTMLAttributes<HTMLFtbAlertsFeedElement>;
            "ftb-app": LocalJSX.FtbApp & JSXBase.HTMLAttributes<HTMLFtbAppElement>;
            "ftb-game-card": LocalJSX.FtbGameCard & JSXBase.HTMLAttributes<HTMLFtbGameCardElement>;
            "ftb-game-date": LocalJSX.FtbGameDate & JSXBase.HTMLAttributes<HTMLFtbGameDateElement>;
            "ftb-game-events": LocalJSX.FtbGameEvents & JSXBase.HTMLAttributes<HTMLFtbGameEventsElement>;
            "ftb-game-lineups": LocalJSX.FtbGameLineups & JSXBase.HTMLAttributes<HTMLFtbGameLineupsElement>;
            "ftb-game-media": LocalJSX.FtbGameMedia & JSXBase.HTMLAttributes<HTMLFtbGameMediaElement>;
            "ftb-game-person": LocalJSX.FtbGamePerson & JSXBase.HTMLAttributes<HTMLFtbGamePersonElement>;
            "ftb-game-photo-preview": LocalJSX.FtbGamePhotoPreview & JSXBase.HTMLAttributes<HTMLFtbGamePhotoPreviewElement>;
            "ftb-game-scoreboard": LocalJSX.FtbGameScoreboard & JSXBase.HTMLAttributes<HTMLFtbGameScoreboardElement>;
            "ftb-game-side-score": LocalJSX.FtbGameSideScore & JSXBase.HTMLAttributes<HTMLFtbGameSideScoreElement>;
            "ftb-game-stadium": LocalJSX.FtbGameStadium & JSXBase.HTMLAttributes<HTMLFtbGameStadiumElement>;
            "ftb-game-state": LocalJSX.FtbGameState & JSXBase.HTMLAttributes<HTMLFtbGameStateElement>;
            "ftb-game-stats-preview": LocalJSX.FtbGameStatsPreview & JSXBase.HTMLAttributes<HTMLFtbGameStatsPreviewElement>;
            "ftb-game-tour": LocalJSX.FtbGameTour & JSXBase.HTMLAttributes<HTMLFtbGameTourElement>;
            "ftb-icon": LocalJSX.FtbIcon & JSXBase.HTMLAttributes<HTMLFtbIconElement>;
            "ftb-img": LocalJSX.FtbImg & JSXBase.HTMLAttributes<HTMLFtbImgElement>;
            "ftb-improving-img": LocalJSX.FtbImprovingImg & JSXBase.HTMLAttributes<HTMLFtbImprovingImgElement>;
            "ftb-language-select": LocalJSX.FtbLanguageSelect & JSXBase.HTMLAttributes<HTMLFtbLanguageSelectElement>;
            "ftb-media": LocalJSX.FtbMedia & JSXBase.HTMLAttributes<HTMLFtbMediaElement>;
            "ftb-pagination": LocalJSX.FtbPagination & JSXBase.HTMLAttributes<HTMLFtbPaginationElement>;
            "ftb-photo-gallery": LocalJSX.FtbPhotoGallery & JSXBase.HTMLAttributes<HTMLFtbPhotoGalleryElement>;
            "ftb-player-photo": LocalJSX.FtbPlayerPhoto & JSXBase.HTMLAttributes<HTMLFtbPlayerPhotoElement>;
            "ftb-searchable-content": LocalJSX.FtbSearchableContent & JSXBase.HTMLAttributes<HTMLFtbSearchableContentElement>;
            "ftb-spinner": LocalJSX.FtbSpinner & JSXBase.HTMLAttributes<HTMLFtbSpinnerElement>;
            "ftb-tabs": LocalJSX.FtbTabs & JSXBase.HTMLAttributes<HTMLFtbTabsElement>;
            "ftb-team-logo": LocalJSX.FtbTeamLogo & JSXBase.HTMLAttributes<HTMLFtbTeamLogoElement>;
            "ftb-user-photo": LocalJSX.FtbUserPhoto & JSXBase.HTMLAttributes<HTMLFtbUserPhotoElement>;
            "ftb-video": LocalJSX.FtbVideo & JSXBase.HTMLAttributes<HTMLFtbVideoElement>;
        }
    }
}
