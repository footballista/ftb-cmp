/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Alert,
  BannerSlotCode,
  Champ,
  Collection,
  Game,
  GamePhoto,
  GameSide,
  GameStaff,
  GameVideo,
  League,
  Player,
  PlayerGame,
  Post,
  Season,
  Stadium,
  Stage,
  Team,
  User,
} from 'ftb-models';
import { FtbGameCardField } from './components/ftb-game-card/ftb-game-card-fields';
import { FtbCustomLinkProp } from '@src/components/ftb-link/ftb-custom-link-prop';
import { CategoryInterface } from './components/ftb-searchable-content/ftb-searchable-content.component';
import { FtbTeamLogoMode } from './components/ftb-team-logo/ftb-team-logo-mode';
export namespace Components {
  interface CmpShowcase {}
  interface FtbAlertArticle {
    alert: Alert;
  }
  interface FtbAlertDate {
    alert: Alert;
  }
  interface FtbAlertPhoto {
    alert: Alert;
  }
  interface FtbAlertResult {
    alert: Alert;
  }
  interface FtbAlertVideo {
    alert: Alert;
  }
  interface FtbAlertWish {
    alert: Alert;
  }
  interface FtbAlertsFeed {}
  interface FtbApp {
    firebaseConfig: {
      apiKey: string;
      authDomain: string;
      databaseURL: string;
      projectId: string;
      storageBucket: string;
      messagingSenderId: string;
      appId: string;
      vapidKey: string;
    };
  }
  interface FtbChampCard {
    champ: Champ;
  }
  interface FtbFlag {
    flag: string;
  }
  interface FtbGameCard {
    bottomFields: FtbGameCardField[];
    game: Game;
    leftFields: FtbGameCardField[];
    playerStats: PlayerGame['stats'];
    rightFields: FtbGameCardField[];
    topFields: FtbGameCardField[];
  }
  interface FtbGameDate {
    game: Game;
    withtime: boolean;
  }
  interface FtbGameEvents {
    game: Game;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbGameLineups {
    game: Game;
  }
  interface FtbGameMedia {
    game: Game;
  }
  interface FtbGameNews {
    game: Game;
  }
  interface FtbGamePerson {
    person: GameStaff;
  }
  interface FtbGamePhotoCover {
    customRoute: FtbCustomLinkProp;
    game: Game;
  }
  interface FtbGamePhotoPreview {
    photo: GamePhoto;
  }
  interface FtbGamePhotos {
    game: Game;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbGameScoreboard {
    game: Game;
  }
  interface FtbGameSideScore {
    game: Game;
    side: GameSide;
  }
  interface FtbGameStadium {
    game: Game;
  }
  interface FtbGameState {
    game: Game;
  }
  interface FtbGameStatsPreview {
    game: Game;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    splitToTabs: boolean;
  }
  interface FtbGameTour {
    game: Game;
  }
  interface FtbGameVideos {
    game: Game;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbGlobalSearch {}
  interface FtbIcon {
    svg: string;
  }
  interface FtbImg {
    name: string;
    src: string;
  }
  interface FtbImprovingImg {
    sources: string[];
  }
  interface FtbLanguageSelect {}
  interface FtbLeagueBirthdays {
    league: League;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueChamps {
    league: League;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueDocuments {
    league: League;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueLogo {
    caption: string;
    league: League;
  }
  interface FtbLeagueMedia {
    league: League;
  }
  interface FtbLeagueMediaNewsTab {
    league: League;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueMediaPhotoTab {
    league: League;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueMediaVideoTab {
    league: League;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueStadiums {
    league: League;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueTeams {
    league: League;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLink {
    params: { [key: string]: string | number };
    route: string;
  }
  interface FtbMedia {
    dataLoaded: boolean;
    news: Collection<Post>;
    photoGames: Collection<Game>;
    videoGames: Collection<Game>;
  }
  interface FtbMediaNews {
    dataLoaded: boolean;
    news: Collection<Post>;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbMediaPhotos {
    dataLoaded: boolean;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    photoGames: Collection<Game>;
  }
  interface FtbMediaVideos {
    dataLoaded: boolean;
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    videoGames: Collection<Game>;
  }
  interface FtbPagination {
    /**
     * calculate item Width based on Height. [Width = Height * XtoY]
     */
    XtoY: number;
    /**
     * changing pages from outside
     */
    currentIdx: number;
    /**
     * Use this if container height is predefined. Otherwise provide "rows" property
     */
    fixedContainerHeightPx: number;
    /**
     * optional render function for interval. Might be useful when each page is loaded separately from server
     */
    getItemsForInterval: (items: any[], offset: number, limit: number) => Promise<any[]>;
    /**
     * minimal possible height of item container
     */
    itemMinHeightPx: number;
    /**
     * minimal possible width of item container
     */
    itemMinWidthPx: number;
    /**
     * items to render
     */
    items: any[];
    /**
     * jsx render item func
     */
    renderItem: (item) => string | string[];
    /**
     * Number of rows to display. Either this, or "fixedContainerHeightPx" should be provided
     */
    rows: number;
    /**
     * whether elements could be stretched horizontally
     */
    stretchX: boolean;
    /**
     * whether elements could be stretched vertically
     */
    stretchY: boolean;
    /**
     * total number of items (this.items.length might be less if not fully loaded)
     */
    totalItems: number;
  }
  interface FtbPartnerBanner {
    leagueId: number;
    slotCode: BannerSlotCode;
  }
  interface FtbPersonGames {
    person: User;
  }
  interface FtbPhotoGallery {
    game: Game;
    start: number;
  }
  interface FtbPlayerCareer {
    player: Player;
  }
  interface FtbPlayerGames {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    player: Player;
  }
  interface FtbPlayerMedia {
    player: Player;
  }
  interface FtbPlayerNews {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    player: Player;
  }
  interface FtbPlayerPhoto {
    player: Player;
    playerId: number;
    version: number;
  }
  interface FtbPlayerPhotos {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    player: Player;
  }
  interface FtbPlayerSeasonCard {
    data: { season: Season; stats: { [key: string]: number } };
  }
  interface FtbPlayerTeamCard {
    data: {
      from: any; //dayjs
      till: any; // dayjs
      team: Team;
      stats: { [key: string]: number };
    };
  }
  interface FtbPlayerTransfers {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    player: Player;
  }
  interface FtbPlayerVideos {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    player: Player;
  }
  interface FtbPostCover {
    post: Post;
  }
  interface FtbSearchableContent {
    categories: CategoryInterface[];
    clear: number;
    debounce: number;
    filterFn: (items: any[], query: string, categories?: CategoryInterface[]) => Promise<any[]>;
    /**
     * alternative to "categories" property. used when categories list should be updated on category change
     */
    getCategories: (currentCategories?: CategoryInterface[]) => CategoryInterface[];
    items: any[];
    placeholder: string;
    renderItems: (items: any[]) => string | string[];
  }
  interface FtbSeasonBestPlayers {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSeasonBirthdays {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSeasonGames {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSeasonMedia {
    season: Season;
  }
  interface FtbSeasonNews {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSeasonPhotos {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSeasonStandings {
    season: Season;
    splitToTabs: boolean;
  }
  interface FtbSeasonVideos {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSpinner {}
  interface FtbStadiumCard {
    stadium: Stadium;
  }
  interface FtbStadiumGames {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    stadium: Stadium;
  }
  interface FtbStadiumPhoto {
    stadium: Stadium;
    stadiumId: number;
    version: number;
  }
  interface FtbStageCupNet {
    stage: Stage;
  }
  interface FtbStageTable {
    stage: Stage;
  }
  interface FtbTabs {
    hideSingleTab: boolean;
    tabs: Array<{ renderTitle: () => string; renderContent: () => string }>;
  }
  interface FtbTeamCard {
    team: Team;
  }
  interface FtbTeamGames {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamLogo {
    caption: string;
    logo: string;
    mode: FtbTeamLogoMode;
    name: string;
    team: Team;
    version: number;
  }
  interface FtbTeamMedia {
    team: Team;
  }
  interface FtbTeamNews {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamPhotos {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamRoster {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamSeasons {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamTransfers {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamVideos {
    paginationConfig: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbUserPhoto {
    user: User;
    userId: number;
    version: number;
  }
  interface FtbVideo {
    renderTitle: () => string;
    video: GameVideo;
  }
}
declare global {
  interface HTMLCmpShowcaseElement extends Components.CmpShowcase, HTMLStencilElement {}
  var HTMLCmpShowcaseElement: {
    prototype: HTMLCmpShowcaseElement;
    new (): HTMLCmpShowcaseElement;
  };
  interface HTMLFtbAlertArticleElement extends Components.FtbAlertArticle, HTMLStencilElement {}
  var HTMLFtbAlertArticleElement: {
    prototype: HTMLFtbAlertArticleElement;
    new (): HTMLFtbAlertArticleElement;
  };
  interface HTMLFtbAlertDateElement extends Components.FtbAlertDate, HTMLStencilElement {}
  var HTMLFtbAlertDateElement: {
    prototype: HTMLFtbAlertDateElement;
    new (): HTMLFtbAlertDateElement;
  };
  interface HTMLFtbAlertPhotoElement extends Components.FtbAlertPhoto, HTMLStencilElement {}
  var HTMLFtbAlertPhotoElement: {
    prototype: HTMLFtbAlertPhotoElement;
    new (): HTMLFtbAlertPhotoElement;
  };
  interface HTMLFtbAlertResultElement extends Components.FtbAlertResult, HTMLStencilElement {}
  var HTMLFtbAlertResultElement: {
    prototype: HTMLFtbAlertResultElement;
    new (): HTMLFtbAlertResultElement;
  };
  interface HTMLFtbAlertVideoElement extends Components.FtbAlertVideo, HTMLStencilElement {}
  var HTMLFtbAlertVideoElement: {
    prototype: HTMLFtbAlertVideoElement;
    new (): HTMLFtbAlertVideoElement;
  };
  interface HTMLFtbAlertWishElement extends Components.FtbAlertWish, HTMLStencilElement {}
  var HTMLFtbAlertWishElement: {
    prototype: HTMLFtbAlertWishElement;
    new (): HTMLFtbAlertWishElement;
  };
  interface HTMLFtbAlertsFeedElement extends Components.FtbAlertsFeed, HTMLStencilElement {}
  var HTMLFtbAlertsFeedElement: {
    prototype: HTMLFtbAlertsFeedElement;
    new (): HTMLFtbAlertsFeedElement;
  };
  interface HTMLFtbAppElement extends Components.FtbApp, HTMLStencilElement {}
  var HTMLFtbAppElement: {
    prototype: HTMLFtbAppElement;
    new (): HTMLFtbAppElement;
  };
  interface HTMLFtbChampCardElement extends Components.FtbChampCard, HTMLStencilElement {}
  var HTMLFtbChampCardElement: {
    prototype: HTMLFtbChampCardElement;
    new (): HTMLFtbChampCardElement;
  };
  interface HTMLFtbFlagElement extends Components.FtbFlag, HTMLStencilElement {}
  var HTMLFtbFlagElement: {
    prototype: HTMLFtbFlagElement;
    new (): HTMLFtbFlagElement;
  };
  interface HTMLFtbGameCardElement extends Components.FtbGameCard, HTMLStencilElement {}
  var HTMLFtbGameCardElement: {
    prototype: HTMLFtbGameCardElement;
    new (): HTMLFtbGameCardElement;
  };
  interface HTMLFtbGameDateElement extends Components.FtbGameDate, HTMLStencilElement {}
  var HTMLFtbGameDateElement: {
    prototype: HTMLFtbGameDateElement;
    new (): HTMLFtbGameDateElement;
  };
  interface HTMLFtbGameEventsElement extends Components.FtbGameEvents, HTMLStencilElement {}
  var HTMLFtbGameEventsElement: {
    prototype: HTMLFtbGameEventsElement;
    new (): HTMLFtbGameEventsElement;
  };
  interface HTMLFtbGameLineupsElement extends Components.FtbGameLineups, HTMLStencilElement {}
  var HTMLFtbGameLineupsElement: {
    prototype: HTMLFtbGameLineupsElement;
    new (): HTMLFtbGameLineupsElement;
  };
  interface HTMLFtbGameMediaElement extends Components.FtbGameMedia, HTMLStencilElement {}
  var HTMLFtbGameMediaElement: {
    prototype: HTMLFtbGameMediaElement;
    new (): HTMLFtbGameMediaElement;
  };
  interface HTMLFtbGameNewsElement extends Components.FtbGameNews, HTMLStencilElement {}
  var HTMLFtbGameNewsElement: {
    prototype: HTMLFtbGameNewsElement;
    new (): HTMLFtbGameNewsElement;
  };
  interface HTMLFtbGamePersonElement extends Components.FtbGamePerson, HTMLStencilElement {}
  var HTMLFtbGamePersonElement: {
    prototype: HTMLFtbGamePersonElement;
    new (): HTMLFtbGamePersonElement;
  };
  interface HTMLFtbGamePhotoCoverElement extends Components.FtbGamePhotoCover, HTMLStencilElement {}
  var HTMLFtbGamePhotoCoverElement: {
    prototype: HTMLFtbGamePhotoCoverElement;
    new (): HTMLFtbGamePhotoCoverElement;
  };
  interface HTMLFtbGamePhotoPreviewElement extends Components.FtbGamePhotoPreview, HTMLStencilElement {}
  var HTMLFtbGamePhotoPreviewElement: {
    prototype: HTMLFtbGamePhotoPreviewElement;
    new (): HTMLFtbGamePhotoPreviewElement;
  };
  interface HTMLFtbGamePhotosElement extends Components.FtbGamePhotos, HTMLStencilElement {}
  var HTMLFtbGamePhotosElement: {
    prototype: HTMLFtbGamePhotosElement;
    new (): HTMLFtbGamePhotosElement;
  };
  interface HTMLFtbGameScoreboardElement extends Components.FtbGameScoreboard, HTMLStencilElement {}
  var HTMLFtbGameScoreboardElement: {
    prototype: HTMLFtbGameScoreboardElement;
    new (): HTMLFtbGameScoreboardElement;
  };
  interface HTMLFtbGameSideScoreElement extends Components.FtbGameSideScore, HTMLStencilElement {}
  var HTMLFtbGameSideScoreElement: {
    prototype: HTMLFtbGameSideScoreElement;
    new (): HTMLFtbGameSideScoreElement;
  };
  interface HTMLFtbGameStadiumElement extends Components.FtbGameStadium, HTMLStencilElement {}
  var HTMLFtbGameStadiumElement: {
    prototype: HTMLFtbGameStadiumElement;
    new (): HTMLFtbGameStadiumElement;
  };
  interface HTMLFtbGameStateElement extends Components.FtbGameState, HTMLStencilElement {}
  var HTMLFtbGameStateElement: {
    prototype: HTMLFtbGameStateElement;
    new (): HTMLFtbGameStateElement;
  };
  interface HTMLFtbGameStatsPreviewElement extends Components.FtbGameStatsPreview, HTMLStencilElement {}
  var HTMLFtbGameStatsPreviewElement: {
    prototype: HTMLFtbGameStatsPreviewElement;
    new (): HTMLFtbGameStatsPreviewElement;
  };
  interface HTMLFtbGameTourElement extends Components.FtbGameTour, HTMLStencilElement {}
  var HTMLFtbGameTourElement: {
    prototype: HTMLFtbGameTourElement;
    new (): HTMLFtbGameTourElement;
  };
  interface HTMLFtbGameVideosElement extends Components.FtbGameVideos, HTMLStencilElement {}
  var HTMLFtbGameVideosElement: {
    prototype: HTMLFtbGameVideosElement;
    new (): HTMLFtbGameVideosElement;
  };
  interface HTMLFtbGlobalSearchElement extends Components.FtbGlobalSearch, HTMLStencilElement {}
  var HTMLFtbGlobalSearchElement: {
    prototype: HTMLFtbGlobalSearchElement;
    new (): HTMLFtbGlobalSearchElement;
  };
  interface HTMLFtbIconElement extends Components.FtbIcon, HTMLStencilElement {}
  var HTMLFtbIconElement: {
    prototype: HTMLFtbIconElement;
    new (): HTMLFtbIconElement;
  };
  interface HTMLFtbImgElement extends Components.FtbImg, HTMLStencilElement {}
  var HTMLFtbImgElement: {
    prototype: HTMLFtbImgElement;
    new (): HTMLFtbImgElement;
  };
  interface HTMLFtbImprovingImgElement extends Components.FtbImprovingImg, HTMLStencilElement {}
  var HTMLFtbImprovingImgElement: {
    prototype: HTMLFtbImprovingImgElement;
    new (): HTMLFtbImprovingImgElement;
  };
  interface HTMLFtbLanguageSelectElement extends Components.FtbLanguageSelect, HTMLStencilElement {}
  var HTMLFtbLanguageSelectElement: {
    prototype: HTMLFtbLanguageSelectElement;
    new (): HTMLFtbLanguageSelectElement;
  };
  interface HTMLFtbLeagueBirthdaysElement extends Components.FtbLeagueBirthdays, HTMLStencilElement {}
  var HTMLFtbLeagueBirthdaysElement: {
    prototype: HTMLFtbLeagueBirthdaysElement;
    new (): HTMLFtbLeagueBirthdaysElement;
  };
  interface HTMLFtbLeagueChampsElement extends Components.FtbLeagueChamps, HTMLStencilElement {}
  var HTMLFtbLeagueChampsElement: {
    prototype: HTMLFtbLeagueChampsElement;
    new (): HTMLFtbLeagueChampsElement;
  };
  interface HTMLFtbLeagueDocumentsElement extends Components.FtbLeagueDocuments, HTMLStencilElement {}
  var HTMLFtbLeagueDocumentsElement: {
    prototype: HTMLFtbLeagueDocumentsElement;
    new (): HTMLFtbLeagueDocumentsElement;
  };
  interface HTMLFtbLeagueLogoElement extends Components.FtbLeagueLogo, HTMLStencilElement {}
  var HTMLFtbLeagueLogoElement: {
    prototype: HTMLFtbLeagueLogoElement;
    new (): HTMLFtbLeagueLogoElement;
  };
  interface HTMLFtbLeagueMediaElement extends Components.FtbLeagueMedia, HTMLStencilElement {}
  var HTMLFtbLeagueMediaElement: {
    prototype: HTMLFtbLeagueMediaElement;
    new (): HTMLFtbLeagueMediaElement;
  };
  interface HTMLFtbLeagueMediaNewsTabElement extends Components.FtbLeagueMediaNewsTab, HTMLStencilElement {}
  var HTMLFtbLeagueMediaNewsTabElement: {
    prototype: HTMLFtbLeagueMediaNewsTabElement;
    new (): HTMLFtbLeagueMediaNewsTabElement;
  };
  interface HTMLFtbLeagueMediaPhotoTabElement extends Components.FtbLeagueMediaPhotoTab, HTMLStencilElement {}
  var HTMLFtbLeagueMediaPhotoTabElement: {
    prototype: HTMLFtbLeagueMediaPhotoTabElement;
    new (): HTMLFtbLeagueMediaPhotoTabElement;
  };
  interface HTMLFtbLeagueMediaVideoTabElement extends Components.FtbLeagueMediaVideoTab, HTMLStencilElement {}
  var HTMLFtbLeagueMediaVideoTabElement: {
    prototype: HTMLFtbLeagueMediaVideoTabElement;
    new (): HTMLFtbLeagueMediaVideoTabElement;
  };
  interface HTMLFtbLeagueStadiumsElement extends Components.FtbLeagueStadiums, HTMLStencilElement {}
  var HTMLFtbLeagueStadiumsElement: {
    prototype: HTMLFtbLeagueStadiumsElement;
    new (): HTMLFtbLeagueStadiumsElement;
  };
  interface HTMLFtbLeagueTeamsElement extends Components.FtbLeagueTeams, HTMLStencilElement {}
  var HTMLFtbLeagueTeamsElement: {
    prototype: HTMLFtbLeagueTeamsElement;
    new (): HTMLFtbLeagueTeamsElement;
  };
  interface HTMLFtbLinkElement extends Components.FtbLink, HTMLStencilElement {}
  var HTMLFtbLinkElement: {
    prototype: HTMLFtbLinkElement;
    new (): HTMLFtbLinkElement;
  };
  interface HTMLFtbMediaElement extends Components.FtbMedia, HTMLStencilElement {}
  var HTMLFtbMediaElement: {
    prototype: HTMLFtbMediaElement;
    new (): HTMLFtbMediaElement;
  };
  interface HTMLFtbMediaNewsElement extends Components.FtbMediaNews, HTMLStencilElement {}
  var HTMLFtbMediaNewsElement: {
    prototype: HTMLFtbMediaNewsElement;
    new (): HTMLFtbMediaNewsElement;
  };
  interface HTMLFtbMediaPhotosElement extends Components.FtbMediaPhotos, HTMLStencilElement {}
  var HTMLFtbMediaPhotosElement: {
    prototype: HTMLFtbMediaPhotosElement;
    new (): HTMLFtbMediaPhotosElement;
  };
  interface HTMLFtbMediaVideosElement extends Components.FtbMediaVideos, HTMLStencilElement {}
  var HTMLFtbMediaVideosElement: {
    prototype: HTMLFtbMediaVideosElement;
    new (): HTMLFtbMediaVideosElement;
  };
  interface HTMLFtbPaginationElement extends Components.FtbPagination, HTMLStencilElement {}
  var HTMLFtbPaginationElement: {
    prototype: HTMLFtbPaginationElement;
    new (): HTMLFtbPaginationElement;
  };
  interface HTMLFtbPartnerBannerElement extends Components.FtbPartnerBanner, HTMLStencilElement {}
  var HTMLFtbPartnerBannerElement: {
    prototype: HTMLFtbPartnerBannerElement;
    new (): HTMLFtbPartnerBannerElement;
  };
  interface HTMLFtbPersonGamesElement extends Components.FtbPersonGames, HTMLStencilElement {}
  var HTMLFtbPersonGamesElement: {
    prototype: HTMLFtbPersonGamesElement;
    new (): HTMLFtbPersonGamesElement;
  };
  interface HTMLFtbPhotoGalleryElement extends Components.FtbPhotoGallery, HTMLStencilElement {}
  var HTMLFtbPhotoGalleryElement: {
    prototype: HTMLFtbPhotoGalleryElement;
    new (): HTMLFtbPhotoGalleryElement;
  };
  interface HTMLFtbPlayerCareerElement extends Components.FtbPlayerCareer, HTMLStencilElement {}
  var HTMLFtbPlayerCareerElement: {
    prototype: HTMLFtbPlayerCareerElement;
    new (): HTMLFtbPlayerCareerElement;
  };
  interface HTMLFtbPlayerGamesElement extends Components.FtbPlayerGames, HTMLStencilElement {}
  var HTMLFtbPlayerGamesElement: {
    prototype: HTMLFtbPlayerGamesElement;
    new (): HTMLFtbPlayerGamesElement;
  };
  interface HTMLFtbPlayerMediaElement extends Components.FtbPlayerMedia, HTMLStencilElement {}
  var HTMLFtbPlayerMediaElement: {
    prototype: HTMLFtbPlayerMediaElement;
    new (): HTMLFtbPlayerMediaElement;
  };
  interface HTMLFtbPlayerNewsElement extends Components.FtbPlayerNews, HTMLStencilElement {}
  var HTMLFtbPlayerNewsElement: {
    prototype: HTMLFtbPlayerNewsElement;
    new (): HTMLFtbPlayerNewsElement;
  };
  interface HTMLFtbPlayerPhotoElement extends Components.FtbPlayerPhoto, HTMLStencilElement {}
  var HTMLFtbPlayerPhotoElement: {
    prototype: HTMLFtbPlayerPhotoElement;
    new (): HTMLFtbPlayerPhotoElement;
  };
  interface HTMLFtbPlayerPhotosElement extends Components.FtbPlayerPhotos, HTMLStencilElement {}
  var HTMLFtbPlayerPhotosElement: {
    prototype: HTMLFtbPlayerPhotosElement;
    new (): HTMLFtbPlayerPhotosElement;
  };
  interface HTMLFtbPlayerSeasonCardElement extends Components.FtbPlayerSeasonCard, HTMLStencilElement {}
  var HTMLFtbPlayerSeasonCardElement: {
    prototype: HTMLFtbPlayerSeasonCardElement;
    new (): HTMLFtbPlayerSeasonCardElement;
  };
  interface HTMLFtbPlayerTeamCardElement extends Components.FtbPlayerTeamCard, HTMLStencilElement {}
  var HTMLFtbPlayerTeamCardElement: {
    prototype: HTMLFtbPlayerTeamCardElement;
    new (): HTMLFtbPlayerTeamCardElement;
  };
  interface HTMLFtbPlayerTransfersElement extends Components.FtbPlayerTransfers, HTMLStencilElement {}
  var HTMLFtbPlayerTransfersElement: {
    prototype: HTMLFtbPlayerTransfersElement;
    new (): HTMLFtbPlayerTransfersElement;
  };
  interface HTMLFtbPlayerVideosElement extends Components.FtbPlayerVideos, HTMLStencilElement {}
  var HTMLFtbPlayerVideosElement: {
    prototype: HTMLFtbPlayerVideosElement;
    new (): HTMLFtbPlayerVideosElement;
  };
  interface HTMLFtbPostCoverElement extends Components.FtbPostCover, HTMLStencilElement {}
  var HTMLFtbPostCoverElement: {
    prototype: HTMLFtbPostCoverElement;
    new (): HTMLFtbPostCoverElement;
  };
  interface HTMLFtbSearchableContentElement extends Components.FtbSearchableContent, HTMLStencilElement {}
  var HTMLFtbSearchableContentElement: {
    prototype: HTMLFtbSearchableContentElement;
    new (): HTMLFtbSearchableContentElement;
  };
  interface HTMLFtbSeasonBestPlayersElement extends Components.FtbSeasonBestPlayers, HTMLStencilElement {}
  var HTMLFtbSeasonBestPlayersElement: {
    prototype: HTMLFtbSeasonBestPlayersElement;
    new (): HTMLFtbSeasonBestPlayersElement;
  };
  interface HTMLFtbSeasonBirthdaysElement extends Components.FtbSeasonBirthdays, HTMLStencilElement {}
  var HTMLFtbSeasonBirthdaysElement: {
    prototype: HTMLFtbSeasonBirthdaysElement;
    new (): HTMLFtbSeasonBirthdaysElement;
  };
  interface HTMLFtbSeasonGamesElement extends Components.FtbSeasonGames, HTMLStencilElement {}
  var HTMLFtbSeasonGamesElement: {
    prototype: HTMLFtbSeasonGamesElement;
    new (): HTMLFtbSeasonGamesElement;
  };
  interface HTMLFtbSeasonMediaElement extends Components.FtbSeasonMedia, HTMLStencilElement {}
  var HTMLFtbSeasonMediaElement: {
    prototype: HTMLFtbSeasonMediaElement;
    new (): HTMLFtbSeasonMediaElement;
  };
  interface HTMLFtbSeasonNewsElement extends Components.FtbSeasonNews, HTMLStencilElement {}
  var HTMLFtbSeasonNewsElement: {
    prototype: HTMLFtbSeasonNewsElement;
    new (): HTMLFtbSeasonNewsElement;
  };
  interface HTMLFtbSeasonPhotosElement extends Components.FtbSeasonPhotos, HTMLStencilElement {}
  var HTMLFtbSeasonPhotosElement: {
    prototype: HTMLFtbSeasonPhotosElement;
    new (): HTMLFtbSeasonPhotosElement;
  };
  interface HTMLFtbSeasonStandingsElement extends Components.FtbSeasonStandings, HTMLStencilElement {}
  var HTMLFtbSeasonStandingsElement: {
    prototype: HTMLFtbSeasonStandingsElement;
    new (): HTMLFtbSeasonStandingsElement;
  };
  interface HTMLFtbSeasonVideosElement extends Components.FtbSeasonVideos, HTMLStencilElement {}
  var HTMLFtbSeasonVideosElement: {
    prototype: HTMLFtbSeasonVideosElement;
    new (): HTMLFtbSeasonVideosElement;
  };
  interface HTMLFtbSpinnerElement extends Components.FtbSpinner, HTMLStencilElement {}
  var HTMLFtbSpinnerElement: {
    prototype: HTMLFtbSpinnerElement;
    new (): HTMLFtbSpinnerElement;
  };
  interface HTMLFtbStadiumCardElement extends Components.FtbStadiumCard, HTMLStencilElement {}
  var HTMLFtbStadiumCardElement: {
    prototype: HTMLFtbStadiumCardElement;
    new (): HTMLFtbStadiumCardElement;
  };
  interface HTMLFtbStadiumGamesElement extends Components.FtbStadiumGames, HTMLStencilElement {}
  var HTMLFtbStadiumGamesElement: {
    prototype: HTMLFtbStadiumGamesElement;
    new (): HTMLFtbStadiumGamesElement;
  };
  interface HTMLFtbStadiumPhotoElement extends Components.FtbStadiumPhoto, HTMLStencilElement {}
  var HTMLFtbStadiumPhotoElement: {
    prototype: HTMLFtbStadiumPhotoElement;
    new (): HTMLFtbStadiumPhotoElement;
  };
  interface HTMLFtbStageCupNetElement extends Components.FtbStageCupNet, HTMLStencilElement {}
  var HTMLFtbStageCupNetElement: {
    prototype: HTMLFtbStageCupNetElement;
    new (): HTMLFtbStageCupNetElement;
  };
  interface HTMLFtbStageTableElement extends Components.FtbStageTable, HTMLStencilElement {}
  var HTMLFtbStageTableElement: {
    prototype: HTMLFtbStageTableElement;
    new (): HTMLFtbStageTableElement;
  };
  interface HTMLFtbTabsElement extends Components.FtbTabs, HTMLStencilElement {}
  var HTMLFtbTabsElement: {
    prototype: HTMLFtbTabsElement;
    new (): HTMLFtbTabsElement;
  };
  interface HTMLFtbTeamCardElement extends Components.FtbTeamCard, HTMLStencilElement {}
  var HTMLFtbTeamCardElement: {
    prototype: HTMLFtbTeamCardElement;
    new (): HTMLFtbTeamCardElement;
  };
  interface HTMLFtbTeamGamesElement extends Components.FtbTeamGames, HTMLStencilElement {}
  var HTMLFtbTeamGamesElement: {
    prototype: HTMLFtbTeamGamesElement;
    new (): HTMLFtbTeamGamesElement;
  };
  interface HTMLFtbTeamLogoElement extends Components.FtbTeamLogo, HTMLStencilElement {}
  var HTMLFtbTeamLogoElement: {
    prototype: HTMLFtbTeamLogoElement;
    new (): HTMLFtbTeamLogoElement;
  };
  interface HTMLFtbTeamMediaElement extends Components.FtbTeamMedia, HTMLStencilElement {}
  var HTMLFtbTeamMediaElement: {
    prototype: HTMLFtbTeamMediaElement;
    new (): HTMLFtbTeamMediaElement;
  };
  interface HTMLFtbTeamNewsElement extends Components.FtbTeamNews, HTMLStencilElement {}
  var HTMLFtbTeamNewsElement: {
    prototype: HTMLFtbTeamNewsElement;
    new (): HTMLFtbTeamNewsElement;
  };
  interface HTMLFtbTeamPhotosElement extends Components.FtbTeamPhotos, HTMLStencilElement {}
  var HTMLFtbTeamPhotosElement: {
    prototype: HTMLFtbTeamPhotosElement;
    new (): HTMLFtbTeamPhotosElement;
  };
  interface HTMLFtbTeamRosterElement extends Components.FtbTeamRoster, HTMLStencilElement {}
  var HTMLFtbTeamRosterElement: {
    prototype: HTMLFtbTeamRosterElement;
    new (): HTMLFtbTeamRosterElement;
  };
  interface HTMLFtbTeamSeasonsElement extends Components.FtbTeamSeasons, HTMLStencilElement {}
  var HTMLFtbTeamSeasonsElement: {
    prototype: HTMLFtbTeamSeasonsElement;
    new (): HTMLFtbTeamSeasonsElement;
  };
  interface HTMLFtbTeamTransfersElement extends Components.FtbTeamTransfers, HTMLStencilElement {}
  var HTMLFtbTeamTransfersElement: {
    prototype: HTMLFtbTeamTransfersElement;
    new (): HTMLFtbTeamTransfersElement;
  };
  interface HTMLFtbTeamVideosElement extends Components.FtbTeamVideos, HTMLStencilElement {}
  var HTMLFtbTeamVideosElement: {
    prototype: HTMLFtbTeamVideosElement;
    new (): HTMLFtbTeamVideosElement;
  };
  interface HTMLFtbUserPhotoElement extends Components.FtbUserPhoto, HTMLStencilElement {}
  var HTMLFtbUserPhotoElement: {
    prototype: HTMLFtbUserPhotoElement;
    new (): HTMLFtbUserPhotoElement;
  };
  interface HTMLFtbVideoElement extends Components.FtbVideo, HTMLStencilElement {}
  var HTMLFtbVideoElement: {
    prototype: HTMLFtbVideoElement;
    new (): HTMLFtbVideoElement;
  };
  interface HTMLElementTagNameMap {
    'cmp-showcase': HTMLCmpShowcaseElement;
    'ftb-alert-article': HTMLFtbAlertArticleElement;
    'ftb-alert-date': HTMLFtbAlertDateElement;
    'ftb-alert-photo': HTMLFtbAlertPhotoElement;
    'ftb-alert-result': HTMLFtbAlertResultElement;
    'ftb-alert-video': HTMLFtbAlertVideoElement;
    'ftb-alert-wish': HTMLFtbAlertWishElement;
    'ftb-alerts-feed': HTMLFtbAlertsFeedElement;
    'ftb-app': HTMLFtbAppElement;
    'ftb-champ-card': HTMLFtbChampCardElement;
    'ftb-flag': HTMLFtbFlagElement;
    'ftb-game-card': HTMLFtbGameCardElement;
    'ftb-game-date': HTMLFtbGameDateElement;
    'ftb-game-events': HTMLFtbGameEventsElement;
    'ftb-game-lineups': HTMLFtbGameLineupsElement;
    'ftb-game-media': HTMLFtbGameMediaElement;
    'ftb-game-news': HTMLFtbGameNewsElement;
    'ftb-game-person': HTMLFtbGamePersonElement;
    'ftb-game-photo-cover': HTMLFtbGamePhotoCoverElement;
    'ftb-game-photo-preview': HTMLFtbGamePhotoPreviewElement;
    'ftb-game-photos': HTMLFtbGamePhotosElement;
    'ftb-game-scoreboard': HTMLFtbGameScoreboardElement;
    'ftb-game-side-score': HTMLFtbGameSideScoreElement;
    'ftb-game-stadium': HTMLFtbGameStadiumElement;
    'ftb-game-state': HTMLFtbGameStateElement;
    'ftb-game-stats-preview': HTMLFtbGameStatsPreviewElement;
    'ftb-game-tour': HTMLFtbGameTourElement;
    'ftb-game-videos': HTMLFtbGameVideosElement;
    'ftb-global-search': HTMLFtbGlobalSearchElement;
    'ftb-icon': HTMLFtbIconElement;
    'ftb-img': HTMLFtbImgElement;
    'ftb-improving-img': HTMLFtbImprovingImgElement;
    'ftb-language-select': HTMLFtbLanguageSelectElement;
    'ftb-league-birthdays': HTMLFtbLeagueBirthdaysElement;
    'ftb-league-champs': HTMLFtbLeagueChampsElement;
    'ftb-league-documents': HTMLFtbLeagueDocumentsElement;
    'ftb-league-logo': HTMLFtbLeagueLogoElement;
    'ftb-league-media': HTMLFtbLeagueMediaElement;
    'ftb-league-media-news-tab': HTMLFtbLeagueMediaNewsTabElement;
    'ftb-league-media-photo-tab': HTMLFtbLeagueMediaPhotoTabElement;
    'ftb-league-media-video-tab': HTMLFtbLeagueMediaVideoTabElement;
    'ftb-league-stadiums': HTMLFtbLeagueStadiumsElement;
    'ftb-league-teams': HTMLFtbLeagueTeamsElement;
    'ftb-link': HTMLFtbLinkElement;
    'ftb-media': HTMLFtbMediaElement;
    'ftb-media-news': HTMLFtbMediaNewsElement;
    'ftb-media-photos': HTMLFtbMediaPhotosElement;
    'ftb-media-videos': HTMLFtbMediaVideosElement;
    'ftb-pagination': HTMLFtbPaginationElement;
    'ftb-partner-banner': HTMLFtbPartnerBannerElement;
    'ftb-person-games': HTMLFtbPersonGamesElement;
    'ftb-photo-gallery': HTMLFtbPhotoGalleryElement;
    'ftb-player-career': HTMLFtbPlayerCareerElement;
    'ftb-player-games': HTMLFtbPlayerGamesElement;
    'ftb-player-media': HTMLFtbPlayerMediaElement;
    'ftb-player-news': HTMLFtbPlayerNewsElement;
    'ftb-player-photo': HTMLFtbPlayerPhotoElement;
    'ftb-player-photos': HTMLFtbPlayerPhotosElement;
    'ftb-player-season-card': HTMLFtbPlayerSeasonCardElement;
    'ftb-player-team-card': HTMLFtbPlayerTeamCardElement;
    'ftb-player-transfers': HTMLFtbPlayerTransfersElement;
    'ftb-player-videos': HTMLFtbPlayerVideosElement;
    'ftb-post-cover': HTMLFtbPostCoverElement;
    'ftb-searchable-content': HTMLFtbSearchableContentElement;
    'ftb-season-best-players': HTMLFtbSeasonBestPlayersElement;
    'ftb-season-birthdays': HTMLFtbSeasonBirthdaysElement;
    'ftb-season-games': HTMLFtbSeasonGamesElement;
    'ftb-season-media': HTMLFtbSeasonMediaElement;
    'ftb-season-news': HTMLFtbSeasonNewsElement;
    'ftb-season-photos': HTMLFtbSeasonPhotosElement;
    'ftb-season-standings': HTMLFtbSeasonStandingsElement;
    'ftb-season-videos': HTMLFtbSeasonVideosElement;
    'ftb-spinner': HTMLFtbSpinnerElement;
    'ftb-stadium-card': HTMLFtbStadiumCardElement;
    'ftb-stadium-games': HTMLFtbStadiumGamesElement;
    'ftb-stadium-photo': HTMLFtbStadiumPhotoElement;
    'ftb-stage-cup-net': HTMLFtbStageCupNetElement;
    'ftb-stage-table': HTMLFtbStageTableElement;
    'ftb-tabs': HTMLFtbTabsElement;
    'ftb-team-card': HTMLFtbTeamCardElement;
    'ftb-team-games': HTMLFtbTeamGamesElement;
    'ftb-team-logo': HTMLFtbTeamLogoElement;
    'ftb-team-media': HTMLFtbTeamMediaElement;
    'ftb-team-news': HTMLFtbTeamNewsElement;
    'ftb-team-photos': HTMLFtbTeamPhotosElement;
    'ftb-team-roster': HTMLFtbTeamRosterElement;
    'ftb-team-seasons': HTMLFtbTeamSeasonsElement;
    'ftb-team-transfers': HTMLFtbTeamTransfersElement;
    'ftb-team-videos': HTMLFtbTeamVideosElement;
    'ftb-user-photo': HTMLFtbUserPhotoElement;
    'ftb-video': HTMLFtbVideoElement;
  }
}
declare namespace LocalJSX {
  interface CmpShowcase {}
  interface FtbAlertArticle {
    alert: Alert;
  }
  interface FtbAlertDate {
    alert: Alert;
  }
  interface FtbAlertPhoto {
    alert: Alert;
  }
  interface FtbAlertResult {
    alert: Alert;
  }
  interface FtbAlertVideo {
    alert: Alert;
  }
  interface FtbAlertWish {
    alert: Alert;
  }
  interface FtbAlertsFeed {}
  interface FtbApp {
    firebaseConfig?: {
      apiKey: string;
      authDomain: string;
      databaseURL: string;
      projectId: string;
      storageBucket: string;
      messagingSenderId: string;
      appId: string;
      vapidKey: string;
    };
  }
  interface FtbChampCard {
    champ: Champ;
  }
  interface FtbFlag {
    flag?: string;
    onColor?: (event: CustomEvent<[number, number, number][]>) => void;
  }
  interface FtbGameCard {
    bottomFields?: FtbGameCardField[];
    game: Game;
    leftFields?: FtbGameCardField[];
    playerStats?: PlayerGame['stats'];
    rightFields?: FtbGameCardField[];
    topFields?: FtbGameCardField[];
  }
  interface FtbGameDate {
    game: Game;
    withtime?: boolean;
  }
  interface FtbGameEvents {
    game: Game;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbGameLineups {
    game: Game;
  }
  interface FtbGameMedia {
    game: Game;
  }
  interface FtbGameNews {
    game: Game;
  }
  interface FtbGamePerson {
    person: GameStaff;
  }
  interface FtbGamePhotoCover {
    customRoute?: FtbCustomLinkProp;
    game: Game;
  }
  interface FtbGamePhotoPreview {
    photo?: GamePhoto;
  }
  interface FtbGamePhotos {
    game: Game;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbGameScoreboard {
    game: Game;
  }
  interface FtbGameSideScore {
    game?: Game;
    side: GameSide;
  }
  interface FtbGameStadium {
    game: Game;
  }
  interface FtbGameState {
    game: Game;
  }
  interface FtbGameStatsPreview {
    game: Game;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    splitToTabs?: boolean;
  }
  interface FtbGameTour {
    game?: Game;
  }
  interface FtbGameVideos {
    game: Game;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbGlobalSearch {}
  interface FtbIcon {
    svg: string;
  }
  interface FtbImg {
    name?: string;
    onColor?: (event: CustomEvent<[number, number, number][]>) => void;
    onFailed?: (event: CustomEvent<boolean>) => void;
    onLoaded?: (event: CustomEvent<boolean>) => void;
    src: string;
  }
  interface FtbImprovingImg {
    sources: string[];
  }
  interface FtbLanguageSelect {}
  interface FtbLeagueBirthdays {
    league: League;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueChamps {
    league: League;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueDocuments {
    league: League;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueLogo {
    caption?: string;
    league: League;
  }
  interface FtbLeagueMedia {
    league: League;
  }
  interface FtbLeagueMediaNewsTab {
    league: League;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueMediaPhotoTab {
    league: League;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueMediaVideoTab {
    league: League;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueStadiums {
    league: League;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLeagueTeams {
    league: League;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbLink {
    params?: { [key: string]: string | number };
    route: string;
  }
  interface FtbMedia {
    dataLoaded?: boolean;
    news?: Collection<Post>;
    photoGames?: Collection<Game>;
    videoGames?: Collection<Game>;
  }
  interface FtbMediaNews {
    dataLoaded?: boolean;
    news?: Collection<Post>;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
  }
  interface FtbMediaPhotos {
    dataLoaded?: boolean;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    photoGames?: Collection<Game>;
  }
  interface FtbMediaVideos {
    dataLoaded?: boolean;
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    videoGames?: Collection<Game>;
  }
  interface FtbPagination {
    /**
     * calculate item Width based on Height. [Width = Height * XtoY]
     */
    XtoY?: number;
    /**
     * changing pages from outside
     */
    currentIdx?: number;
    /**
     * Use this if container height is predefined. Otherwise provide "rows" property
     */
    fixedContainerHeightPx?: number;
    /**
     * optional render function for interval. Might be useful when each page is loaded separately from server
     */
    getItemsForInterval?: (items: any[], offset: number, limit: number) => Promise<any[]>;
    /**
     * minimal possible height of item container
     */
    itemMinHeightPx: number;
    /**
     * minimal possible width of item container
     */
    itemMinWidthPx: number;
    /**
     * items to render
     */
    items: any[];
    /**
     * jsx render item func
     */
    renderItem: (item) => string | string[];
    /**
     * Number of rows to display. Either this, or "fixedContainerHeightPx" should be provided
     */
    rows?: number;
    /**
     * whether elements could be stretched horizontally
     */
    stretchX?: boolean;
    /**
     * whether elements could be stretched vertically
     */
    stretchY?: boolean;
    /**
     * total number of items (this.items.length might be less if not fully loaded)
     */
    totalItems: number;
  }
  interface FtbPartnerBanner {
    leagueId?: number;
    slotCode: BannerSlotCode;
  }
  interface FtbPersonGames {
    person: User;
  }
  interface FtbPhotoGallery {
    game: Game;
    onClosed?: (event: CustomEvent<boolean>) => void;
    onSlideChanged?: (event: CustomEvent<number>) => void;
    start: number;
  }
  interface FtbPlayerCareer {
    player: Player;
  }
  interface FtbPlayerGames {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    player: Player;
  }
  interface FtbPlayerMedia {
    player: Player;
  }
  interface FtbPlayerNews {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    player: Player;
  }
  interface FtbPlayerPhoto {
    player?: Player;
    playerId?: number;
    version?: number;
  }
  interface FtbPlayerPhotos {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    player: Player;
  }
  interface FtbPlayerSeasonCard {
    data: { season: Season; stats: { [key: string]: number } };
  }
  interface FtbPlayerTeamCard {
    data: {
      from: any; //dayjs
      till: any; // dayjs
      team: Team;
      stats: { [key: string]: number };
    };
  }
  interface FtbPlayerTransfers {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    player: Player;
  }
  interface FtbPlayerVideos {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    player: Player;
  }
  interface FtbPostCover {
    post: Post;
  }
  interface FtbSearchableContent {
    categories?: CategoryInterface[];
    clear?: number;
    debounce?: number;
    filterFn: (items: any[], query: string, categories?: CategoryInterface[]) => Promise<any[]>;
    /**
     * alternative to "categories" property. used when categories list should be updated on category change
     */
    getCategories?: (currentCategories?: CategoryInterface[]) => CategoryInterface[];
    items: any[];
    onInputFocusChange?: (event: CustomEvent<boolean>) => void;
    onInputKeyDown?: (event: CustomEvent<KeyboardEvent>) => void;
    placeholder: string;
    renderItems: (items: any[]) => string | string[];
  }
  interface FtbSeasonBestPlayers {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSeasonBirthdays {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSeasonGames {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSeasonMedia {
    season: Season;
  }
  interface FtbSeasonNews {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSeasonPhotos {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSeasonStandings {
    season: Season;
    splitToTabs?: boolean;
  }
  interface FtbSeasonVideos {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    season: Season;
  }
  interface FtbSpinner {}
  interface FtbStadiumCard {
    stadium: Stadium;
  }
  interface FtbStadiumGames {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    stadium: Stadium;
  }
  interface FtbStadiumPhoto {
    stadium?: Stadium;
    stadiumId?: number;
    version?: number;
  }
  interface FtbStageCupNet {
    stage: Stage;
  }
  interface FtbStageTable {
    stage: Stage;
  }
  interface FtbTabs {
    hideSingleTab?: boolean;
    tabs: Array<{ renderTitle: () => string; renderContent: () => string }>;
  }
  interface FtbTeamCard {
    team: Team;
  }
  interface FtbTeamGames {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamLogo {
    caption?: string;
    logo?: string;
    mode?: FtbTeamLogoMode;
    name?: string;
    onColor?: (event: CustomEvent<[number, number, number][]>) => void;
    team?: Team;
    version?: number;
  }
  interface FtbTeamMedia {
    team: Team;
  }
  interface FtbTeamNews {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamPhotos {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamRoster {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamSeasons {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamTransfers {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbTeamVideos {
    paginationConfig?: {
      itemMinWidthPx: number;
      itemMinHeightPx: number;
      rows?: number;
      fixedContainerHeightPx?: number;
      stretchX?: boolean;
      stretchY?: boolean;
      XtoY?: number;
    };
    team: Team;
  }
  interface FtbUserPhoto {
    user?: User;
    userId?: number;
    version?: number;
  }
  interface FtbVideo {
    renderTitle?: () => string;
    video: GameVideo;
  }
  interface IntrinsicElements {
    'cmp-showcase': CmpShowcase;
    'ftb-alert-article': FtbAlertArticle;
    'ftb-alert-date': FtbAlertDate;
    'ftb-alert-photo': FtbAlertPhoto;
    'ftb-alert-result': FtbAlertResult;
    'ftb-alert-video': FtbAlertVideo;
    'ftb-alert-wish': FtbAlertWish;
    'ftb-alerts-feed': FtbAlertsFeed;
    'ftb-app': FtbApp;
    'ftb-champ-card': FtbChampCard;
    'ftb-flag': FtbFlag;
    'ftb-game-card': FtbGameCard;
    'ftb-game-date': FtbGameDate;
    'ftb-game-events': FtbGameEvents;
    'ftb-game-lineups': FtbGameLineups;
    'ftb-game-media': FtbGameMedia;
    'ftb-game-news': FtbGameNews;
    'ftb-game-person': FtbGamePerson;
    'ftb-game-photo-cover': FtbGamePhotoCover;
    'ftb-game-photo-preview': FtbGamePhotoPreview;
    'ftb-game-photos': FtbGamePhotos;
    'ftb-game-scoreboard': FtbGameScoreboard;
    'ftb-game-side-score': FtbGameSideScore;
    'ftb-game-stadium': FtbGameStadium;
    'ftb-game-state': FtbGameState;
    'ftb-game-stats-preview': FtbGameStatsPreview;
    'ftb-game-tour': FtbGameTour;
    'ftb-game-videos': FtbGameVideos;
    'ftb-global-search': FtbGlobalSearch;
    'ftb-icon': FtbIcon;
    'ftb-img': FtbImg;
    'ftb-improving-img': FtbImprovingImg;
    'ftb-language-select': FtbLanguageSelect;
    'ftb-league-birthdays': FtbLeagueBirthdays;
    'ftb-league-champs': FtbLeagueChamps;
    'ftb-league-documents': FtbLeagueDocuments;
    'ftb-league-logo': FtbLeagueLogo;
    'ftb-league-media': FtbLeagueMedia;
    'ftb-league-media-news-tab': FtbLeagueMediaNewsTab;
    'ftb-league-media-photo-tab': FtbLeagueMediaPhotoTab;
    'ftb-league-media-video-tab': FtbLeagueMediaVideoTab;
    'ftb-league-stadiums': FtbLeagueStadiums;
    'ftb-league-teams': FtbLeagueTeams;
    'ftb-link': FtbLink;
    'ftb-media': FtbMedia;
    'ftb-media-news': FtbMediaNews;
    'ftb-media-photos': FtbMediaPhotos;
    'ftb-media-videos': FtbMediaVideos;
    'ftb-pagination': FtbPagination;
    'ftb-partner-banner': FtbPartnerBanner;
    'ftb-person-games': FtbPersonGames;
    'ftb-photo-gallery': FtbPhotoGallery;
    'ftb-player-career': FtbPlayerCareer;
    'ftb-player-games': FtbPlayerGames;
    'ftb-player-media': FtbPlayerMedia;
    'ftb-player-news': FtbPlayerNews;
    'ftb-player-photo': FtbPlayerPhoto;
    'ftb-player-photos': FtbPlayerPhotos;
    'ftb-player-season-card': FtbPlayerSeasonCard;
    'ftb-player-team-card': FtbPlayerTeamCard;
    'ftb-player-transfers': FtbPlayerTransfers;
    'ftb-player-videos': FtbPlayerVideos;
    'ftb-post-cover': FtbPostCover;
    'ftb-searchable-content': FtbSearchableContent;
    'ftb-season-best-players': FtbSeasonBestPlayers;
    'ftb-season-birthdays': FtbSeasonBirthdays;
    'ftb-season-games': FtbSeasonGames;
    'ftb-season-media': FtbSeasonMedia;
    'ftb-season-news': FtbSeasonNews;
    'ftb-season-photos': FtbSeasonPhotos;
    'ftb-season-standings': FtbSeasonStandings;
    'ftb-season-videos': FtbSeasonVideos;
    'ftb-spinner': FtbSpinner;
    'ftb-stadium-card': FtbStadiumCard;
    'ftb-stadium-games': FtbStadiumGames;
    'ftb-stadium-photo': FtbStadiumPhoto;
    'ftb-stage-cup-net': FtbStageCupNet;
    'ftb-stage-table': FtbStageTable;
    'ftb-tabs': FtbTabs;
    'ftb-team-card': FtbTeamCard;
    'ftb-team-games': FtbTeamGames;
    'ftb-team-logo': FtbTeamLogo;
    'ftb-team-media': FtbTeamMedia;
    'ftb-team-news': FtbTeamNews;
    'ftb-team-photos': FtbTeamPhotos;
    'ftb-team-roster': FtbTeamRoster;
    'ftb-team-seasons': FtbTeamSeasons;
    'ftb-team-transfers': FtbTeamTransfers;
    'ftb-team-videos': FtbTeamVideos;
    'ftb-user-photo': FtbUserPhoto;
    'ftb-video': FtbVideo;
  }
}
export { LocalJSX as JSX };
declare module '@stencil/core' {
  export namespace JSX {
    interface IntrinsicElements {
      'cmp-showcase': LocalJSX.CmpShowcase & JSXBase.HTMLAttributes<HTMLCmpShowcaseElement>;
      'ftb-alert-article': LocalJSX.FtbAlertArticle & JSXBase.HTMLAttributes<HTMLFtbAlertArticleElement>;
      'ftb-alert-date': LocalJSX.FtbAlertDate & JSXBase.HTMLAttributes<HTMLFtbAlertDateElement>;
      'ftb-alert-photo': LocalJSX.FtbAlertPhoto & JSXBase.HTMLAttributes<HTMLFtbAlertPhotoElement>;
      'ftb-alert-result': LocalJSX.FtbAlertResult & JSXBase.HTMLAttributes<HTMLFtbAlertResultElement>;
      'ftb-alert-video': LocalJSX.FtbAlertVideo & JSXBase.HTMLAttributes<HTMLFtbAlertVideoElement>;
      'ftb-alert-wish': LocalJSX.FtbAlertWish & JSXBase.HTMLAttributes<HTMLFtbAlertWishElement>;
      'ftb-alerts-feed': LocalJSX.FtbAlertsFeed & JSXBase.HTMLAttributes<HTMLFtbAlertsFeedElement>;
      'ftb-app': LocalJSX.FtbApp & JSXBase.HTMLAttributes<HTMLFtbAppElement>;
      'ftb-champ-card': LocalJSX.FtbChampCard & JSXBase.HTMLAttributes<HTMLFtbChampCardElement>;
      'ftb-flag': LocalJSX.FtbFlag & JSXBase.HTMLAttributes<HTMLFtbFlagElement>;
      'ftb-game-card': LocalJSX.FtbGameCard & JSXBase.HTMLAttributes<HTMLFtbGameCardElement>;
      'ftb-game-date': LocalJSX.FtbGameDate & JSXBase.HTMLAttributes<HTMLFtbGameDateElement>;
      'ftb-game-events': LocalJSX.FtbGameEvents & JSXBase.HTMLAttributes<HTMLFtbGameEventsElement>;
      'ftb-game-lineups': LocalJSX.FtbGameLineups & JSXBase.HTMLAttributes<HTMLFtbGameLineupsElement>;
      'ftb-game-media': LocalJSX.FtbGameMedia & JSXBase.HTMLAttributes<HTMLFtbGameMediaElement>;
      'ftb-game-news': LocalJSX.FtbGameNews & JSXBase.HTMLAttributes<HTMLFtbGameNewsElement>;
      'ftb-game-person': LocalJSX.FtbGamePerson & JSXBase.HTMLAttributes<HTMLFtbGamePersonElement>;
      'ftb-game-photo-cover': LocalJSX.FtbGamePhotoCover & JSXBase.HTMLAttributes<HTMLFtbGamePhotoCoverElement>;
      'ftb-game-photo-preview': LocalJSX.FtbGamePhotoPreview & JSXBase.HTMLAttributes<HTMLFtbGamePhotoPreviewElement>;
      'ftb-game-photos': LocalJSX.FtbGamePhotos & JSXBase.HTMLAttributes<HTMLFtbGamePhotosElement>;
      'ftb-game-scoreboard': LocalJSX.FtbGameScoreboard & JSXBase.HTMLAttributes<HTMLFtbGameScoreboardElement>;
      'ftb-game-side-score': LocalJSX.FtbGameSideScore & JSXBase.HTMLAttributes<HTMLFtbGameSideScoreElement>;
      'ftb-game-stadium': LocalJSX.FtbGameStadium & JSXBase.HTMLAttributes<HTMLFtbGameStadiumElement>;
      'ftb-game-state': LocalJSX.FtbGameState & JSXBase.HTMLAttributes<HTMLFtbGameStateElement>;
      'ftb-game-stats-preview': LocalJSX.FtbGameStatsPreview & JSXBase.HTMLAttributes<HTMLFtbGameStatsPreviewElement>;
      'ftb-game-tour': LocalJSX.FtbGameTour & JSXBase.HTMLAttributes<HTMLFtbGameTourElement>;
      'ftb-game-videos': LocalJSX.FtbGameVideos & JSXBase.HTMLAttributes<HTMLFtbGameVideosElement>;
      'ftb-global-search': LocalJSX.FtbGlobalSearch & JSXBase.HTMLAttributes<HTMLFtbGlobalSearchElement>;
      'ftb-icon': LocalJSX.FtbIcon & JSXBase.HTMLAttributes<HTMLFtbIconElement>;
      'ftb-img': LocalJSX.FtbImg & JSXBase.HTMLAttributes<HTMLFtbImgElement>;
      'ftb-improving-img': LocalJSX.FtbImprovingImg & JSXBase.HTMLAttributes<HTMLFtbImprovingImgElement>;
      'ftb-language-select': LocalJSX.FtbLanguageSelect & JSXBase.HTMLAttributes<HTMLFtbLanguageSelectElement>;
      'ftb-league-birthdays': LocalJSX.FtbLeagueBirthdays & JSXBase.HTMLAttributes<HTMLFtbLeagueBirthdaysElement>;
      'ftb-league-champs': LocalJSX.FtbLeagueChamps & JSXBase.HTMLAttributes<HTMLFtbLeagueChampsElement>;
      'ftb-league-documents': LocalJSX.FtbLeagueDocuments & JSXBase.HTMLAttributes<HTMLFtbLeagueDocumentsElement>;
      'ftb-league-logo': LocalJSX.FtbLeagueLogo & JSXBase.HTMLAttributes<HTMLFtbLeagueLogoElement>;
      'ftb-league-media': LocalJSX.FtbLeagueMedia & JSXBase.HTMLAttributes<HTMLFtbLeagueMediaElement>;
      'ftb-league-media-news-tab': LocalJSX.FtbLeagueMediaNewsTab &
        JSXBase.HTMLAttributes<HTMLFtbLeagueMediaNewsTabElement>;
      'ftb-league-media-photo-tab': LocalJSX.FtbLeagueMediaPhotoTab &
        JSXBase.HTMLAttributes<HTMLFtbLeagueMediaPhotoTabElement>;
      'ftb-league-media-video-tab': LocalJSX.FtbLeagueMediaVideoTab &
        JSXBase.HTMLAttributes<HTMLFtbLeagueMediaVideoTabElement>;
      'ftb-league-stadiums': LocalJSX.FtbLeagueStadiums & JSXBase.HTMLAttributes<HTMLFtbLeagueStadiumsElement>;
      'ftb-league-teams': LocalJSX.FtbLeagueTeams & JSXBase.HTMLAttributes<HTMLFtbLeagueTeamsElement>;
      'ftb-link': LocalJSX.FtbLink & JSXBase.HTMLAttributes<HTMLFtbLinkElement>;
      'ftb-media': LocalJSX.FtbMedia & JSXBase.HTMLAttributes<HTMLFtbMediaElement>;
      'ftb-media-news': LocalJSX.FtbMediaNews & JSXBase.HTMLAttributes<HTMLFtbMediaNewsElement>;
      'ftb-media-photos': LocalJSX.FtbMediaPhotos & JSXBase.HTMLAttributes<HTMLFtbMediaPhotosElement>;
      'ftb-media-videos': LocalJSX.FtbMediaVideos & JSXBase.HTMLAttributes<HTMLFtbMediaVideosElement>;
      'ftb-pagination': LocalJSX.FtbPagination & JSXBase.HTMLAttributes<HTMLFtbPaginationElement>;
      'ftb-partner-banner': LocalJSX.FtbPartnerBanner & JSXBase.HTMLAttributes<HTMLFtbPartnerBannerElement>;
      'ftb-person-games': LocalJSX.FtbPersonGames & JSXBase.HTMLAttributes<HTMLFtbPersonGamesElement>;
      'ftb-photo-gallery': LocalJSX.FtbPhotoGallery & JSXBase.HTMLAttributes<HTMLFtbPhotoGalleryElement>;
      'ftb-player-career': LocalJSX.FtbPlayerCareer & JSXBase.HTMLAttributes<HTMLFtbPlayerCareerElement>;
      'ftb-player-games': LocalJSX.FtbPlayerGames & JSXBase.HTMLAttributes<HTMLFtbPlayerGamesElement>;
      'ftb-player-media': LocalJSX.FtbPlayerMedia & JSXBase.HTMLAttributes<HTMLFtbPlayerMediaElement>;
      'ftb-player-news': LocalJSX.FtbPlayerNews & JSXBase.HTMLAttributes<HTMLFtbPlayerNewsElement>;
      'ftb-player-photo': LocalJSX.FtbPlayerPhoto & JSXBase.HTMLAttributes<HTMLFtbPlayerPhotoElement>;
      'ftb-player-photos': LocalJSX.FtbPlayerPhotos & JSXBase.HTMLAttributes<HTMLFtbPlayerPhotosElement>;
      'ftb-player-season-card': LocalJSX.FtbPlayerSeasonCard & JSXBase.HTMLAttributes<HTMLFtbPlayerSeasonCardElement>;
      'ftb-player-team-card': LocalJSX.FtbPlayerTeamCard & JSXBase.HTMLAttributes<HTMLFtbPlayerTeamCardElement>;
      'ftb-player-transfers': LocalJSX.FtbPlayerTransfers & JSXBase.HTMLAttributes<HTMLFtbPlayerTransfersElement>;
      'ftb-player-videos': LocalJSX.FtbPlayerVideos & JSXBase.HTMLAttributes<HTMLFtbPlayerVideosElement>;
      'ftb-post-cover': LocalJSX.FtbPostCover & JSXBase.HTMLAttributes<HTMLFtbPostCoverElement>;
      'ftb-searchable-content': LocalJSX.FtbSearchableContent & JSXBase.HTMLAttributes<HTMLFtbSearchableContentElement>;
      'ftb-season-best-players': LocalJSX.FtbSeasonBestPlayers &
        JSXBase.HTMLAttributes<HTMLFtbSeasonBestPlayersElement>;
      'ftb-season-birthdays': LocalJSX.FtbSeasonBirthdays & JSXBase.HTMLAttributes<HTMLFtbSeasonBirthdaysElement>;
      'ftb-season-games': LocalJSX.FtbSeasonGames & JSXBase.HTMLAttributes<HTMLFtbSeasonGamesElement>;
      'ftb-season-media': LocalJSX.FtbSeasonMedia & JSXBase.HTMLAttributes<HTMLFtbSeasonMediaElement>;
      'ftb-season-news': LocalJSX.FtbSeasonNews & JSXBase.HTMLAttributes<HTMLFtbSeasonNewsElement>;
      'ftb-season-photos': LocalJSX.FtbSeasonPhotos & JSXBase.HTMLAttributes<HTMLFtbSeasonPhotosElement>;
      'ftb-season-standings': LocalJSX.FtbSeasonStandings & JSXBase.HTMLAttributes<HTMLFtbSeasonStandingsElement>;
      'ftb-season-videos': LocalJSX.FtbSeasonVideos & JSXBase.HTMLAttributes<HTMLFtbSeasonVideosElement>;
      'ftb-spinner': LocalJSX.FtbSpinner & JSXBase.HTMLAttributes<HTMLFtbSpinnerElement>;
      'ftb-stadium-card': LocalJSX.FtbStadiumCard & JSXBase.HTMLAttributes<HTMLFtbStadiumCardElement>;
      'ftb-stadium-games': LocalJSX.FtbStadiumGames & JSXBase.HTMLAttributes<HTMLFtbStadiumGamesElement>;
      'ftb-stadium-photo': LocalJSX.FtbStadiumPhoto & JSXBase.HTMLAttributes<HTMLFtbStadiumPhotoElement>;
      'ftb-stage-cup-net': LocalJSX.FtbStageCupNet & JSXBase.HTMLAttributes<HTMLFtbStageCupNetElement>;
      'ftb-stage-table': LocalJSX.FtbStageTable & JSXBase.HTMLAttributes<HTMLFtbStageTableElement>;
      'ftb-tabs': LocalJSX.FtbTabs & JSXBase.HTMLAttributes<HTMLFtbTabsElement>;
      'ftb-team-card': LocalJSX.FtbTeamCard & JSXBase.HTMLAttributes<HTMLFtbTeamCardElement>;
      'ftb-team-games': LocalJSX.FtbTeamGames & JSXBase.HTMLAttributes<HTMLFtbTeamGamesElement>;
      'ftb-team-logo': LocalJSX.FtbTeamLogo & JSXBase.HTMLAttributes<HTMLFtbTeamLogoElement>;
      'ftb-team-media': LocalJSX.FtbTeamMedia & JSXBase.HTMLAttributes<HTMLFtbTeamMediaElement>;
      'ftb-team-news': LocalJSX.FtbTeamNews & JSXBase.HTMLAttributes<HTMLFtbTeamNewsElement>;
      'ftb-team-photos': LocalJSX.FtbTeamPhotos & JSXBase.HTMLAttributes<HTMLFtbTeamPhotosElement>;
      'ftb-team-roster': LocalJSX.FtbTeamRoster & JSXBase.HTMLAttributes<HTMLFtbTeamRosterElement>;
      'ftb-team-seasons': LocalJSX.FtbTeamSeasons & JSXBase.HTMLAttributes<HTMLFtbTeamSeasonsElement>;
      'ftb-team-transfers': LocalJSX.FtbTeamTransfers & JSXBase.HTMLAttributes<HTMLFtbTeamTransfersElement>;
      'ftb-team-videos': LocalJSX.FtbTeamVideos & JSXBase.HTMLAttributes<HTMLFtbTeamVideosElement>;
      'ftb-user-photo': LocalJSX.FtbUserPhoto & JSXBase.HTMLAttributes<HTMLFtbUserPhotoElement>;
      'ftb-video': LocalJSX.FtbVideo & JSXBase.HTMLAttributes<HTMLFtbVideoElement>;
    }
  }
}
